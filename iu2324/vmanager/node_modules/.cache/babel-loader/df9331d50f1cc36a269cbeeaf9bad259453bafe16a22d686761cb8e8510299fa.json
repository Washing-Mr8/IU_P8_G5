{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0,\n  class: \"name\"\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = [\"title\"];\nconst _hoisted_7 = [\"title\"];\nconst _hoisted_8 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $setup.filteredData.length ? (_openBlock(), _createElementBlock(\"table\", _hoisted_1, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.columns, key => {\n    return _openBlock(), _createElementBlock(\"th\", {\n      key: key,\n      onClick: $event => $setup.sortBy(key),\n      class: _normalizeClass({\n        active: $setup.sortKey == key\n      })\n    }, [_createTextVNode(_toDisplayString($setup.capitalize(key)) + \" \", 1 /* TEXT */), $setup.sortKey == key ? (_openBlock(), _createElementBlock(\"span\", {\n      key: 0,\n      class: _normalizeClass(`arrow ${$setup.sortOrders[key] > 0 ? 'asc' : 'dsc'}`)\n    }, null, 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.filteredData, entry => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: entry.id,\n      onClick: $event => _ctx.$emit('choose', entry.id)\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.columns, key => {\n      return _openBlock(), _createElementBlock(\"td\", {\n        key: `_${entry.id}_${key}`,\n        class: \"text-start\"\n      }, [key === 'name' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, _toDisplayString(entry[key]), 1 /* TEXT */)) : Array.isArray(entry[key]) ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(entry[key].slice(0, 4), (item, index) => {\n        return _openBlock(), _createElementBlock(\"span\", {\n          key: index,\n          style: {\n            \"background-color\": \"#073156\",\n            \"color\": \"#ececec\",\n            \"padding\": \"0.3em 0.6em\",\n            \"border-radius\": \"0.25rem\",\n            \"margin-right\": \"5px\"\n          },\n          title: $setup.resolve(item).name\n        }, _toDisplayString($setup.resolve(item).name), 9 /* TEXT, PROPS */, _hoisted_6);\n      }), 128 /* KEYED_FRAGMENT */)), entry[key].length > 4 ? (_openBlock(), _createElementBlock(\"span\", {\n        key: 0,\n        style: {\n          \"background-color\": \"#073156\",\n          \"color\": \"#ececec\",\n          \"padding\": \"0.3em 0.6em\",\n          \"border-radius\": \"0.25rem\"\n        },\n        title: entry[key].slice(4).map(item => $setup.resolve(item).name).join(', ')\n      }, \" +\" + _toDisplayString(entry[key].length - 4), 9 /* TEXT, PROPS */, _hoisted_7)) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(_Fragment, {\n        key: 2\n      }, [_createTextVNode(_toDisplayString(entry[key]), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */))]);\n    }), 128 /* KEYED_FRAGMENT */))], 8 /* PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"(no hay nada que mostrar)\"));\n}","map":{"version":3,"names":["class","$setup","filteredData","length","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","$props","columns","key","onClick","$event","sortBy","_normalizeClass","active","sortKey","capitalize","sortOrders","entry","id","_ctx","$emit","_hoisted_4","_toDisplayString","Array","isArray","_hoisted_5","slice","item","index","style","title","resolve","name","_hoisted_6","map","join","_hoisted_7","_hoisted_8"],"sources":["C:\\Users\\jjcar\\Documents\\_repo_p8\\IU_P8_G5\\iu2324\\vmanager\\src\\components\\VmGrid.vue"],"sourcesContent":["<script setup>\r\nimport { ref, computed } from 'vue'\r\nimport { resolve } from '../model.js'\r\n\r\n// basado en https://vuejs.org/examples/#grid\r\n\r\nconst props = defineProps({\r\n  data: Array,\r\n  columns: Array,\r\n  filterKey: String\r\n})\r\ndefineEmits(['choose'])\r\n\r\nconst sortKey = ref('')\r\nconst sortOrders = ref(\r\n  props.columns.reduce((o, key) => ((o[key] = 1), o), {})\r\n)\r\n\r\nconst filteredData = computed(() => {\r\n  let { data, filterKey } = props\r\n  if (filterKey) {\r\n    filterKey = filterKey.toLowerCase()\r\n    data = data.filter((row) => {\r\n      return Object.keys(row).some((key) => {\r\n        return String(row[key]).toLowerCase().indexOf(filterKey) > -1\r\n      })\r\n    })\r\n  }\r\n  const key = sortKey.value\r\n  if (key) {\r\n    const order = sortOrders.value[key]\r\n    data = data.slice().sort((a, b) => {\r\n      a = a[key]\r\n      b = b[key]\r\n      return (a === b ? 0 : a > b ? 1 : -1) * order\r\n    })\r\n  }\r\n  return data\r\n})\r\n\r\nfunction sortBy(key) {\r\n  sortKey.value = key\r\n  sortOrders.value[key] *= -1\r\n}\r\n\r\nfunction capitalize(str) {\r\n  return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\n</script>\r\n\r\n<template>\r\n  <table v-if=\"filteredData.length\">\r\n    <thead>\r\n      <tr>\r\n        <th v-for=\"key in columns\" :key=\"key\"\r\n          @click=\"sortBy(key)\"\r\n          :class=\"{ active: sortKey == key }\">\r\n          {{ capitalize(key) }}\r\n          <span v-if=\"sortKey==key\" :class=\"`arrow ${sortOrders[key] > 0 ? 'asc' : 'dsc'}`\">\r\n          </span>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr v-for=\"entry in filteredData\" :key=\"entry.id\" \r\n        @click=\"$emit('choose', entry.id)\">\r\n\r\n        <td v-for=\"key in columns\" :key=\"`_${entry.id}_${key}`\" class=\"text-start\">\r\n          <template v-if=\"key === 'name'\">\r\n            <span class=\"name\">{{entry[key]}}</span>\r\n          </template>\r\n          <template v-else-if=\"Array.isArray(entry[key])\">\r\n            <span>\r\n              <span v-for=\"(item, index) in entry[key].slice(0, 4)\" :key=\"index\" \r\n                style=\"background-color: #073156; color: #ececec; padding: 0.3em 0.6em; border-radius: 0.25rem; margin-right: 5px;\"\r\n                  :title=\"resolve(item).name\">\r\n                   {{ resolve(item).name }}\r\n              </span>\r\n              <span v-if=\"entry[key].length > 4\" \r\n                style=\"background-color: #073156; color: #ececec; padding: 0.3em 0.6em; border-radius: 0.25rem;\"\r\n                   :title=\"entry[key].slice(4).map(item => resolve(item).name).join(', ')\">\r\n                  +{{ entry[key].length - 4 }}\r\n              </span>\r\n            </span>\r\n          </template>\r\n          <template v-else>\r\n            {{entry[key]}}\r\n          </template>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <p v-else>(no hay nada que mostrar)</p>\r\n</template>\r\n\r\n<style>\r\n.arrow.asc::after {\r\n  content: \"↓\"\r\n}\r\n.arrow.dsc::after {\r\n  content: \"↑\"\r\n}\r\nspan.name {\r\n  font-weight: 1000;\r\n}\r\ntable {\r\n  margin-top: 10px;\r\n\r\n}\r\nthead>tr {\r\n  border-bottom: 1px solid gray;\r\n  color: rgb(104, 103, 103);\r\n}\r\n\r\n\r\n</style>\r\n"],"mappings":";;;;;;;;EAsEkBA,KAAK,EAAC;;;;;;;;;;;SAlBTC,MAAA,CAAAC,YAAY,CAACC,MAAM,I,cAAhCC,mBAAA,CAwCQ,SAAAC,UAAA,GAvCNC,mBAAA,CAUQ,gBATNA,mBAAA,CAQK,c,kBAPHF,mBAAA,CAMKG,SAAA,QAAAC,WAAA,CANaC,MAAA,CAAAC,OAAO,EAAdC,GAAG;yBAAdP,mBAAA,CAMK;MANuBO,GAAG,EAAEA,GAAG;MACjCC,OAAK,EAAAC,MAAA,IAAEZ,MAAA,CAAAa,MAAM,CAACH,GAAG;MACjBX,KAAK,EAAAe,eAAA;QAAAC,MAAA,EAAYf,MAAA,CAAAgB,OAAO,IAAIN;MAAG;0CAC7BV,MAAA,CAAAiB,UAAU,CAACP,GAAG,KAAI,GACrB,iBAAYV,MAAA,CAAAgB,OAAO,IAAEN,GAAG,I,cAAxBP,mBAAA,CACO;;MADoBJ,KAAK,EAAAe,eAAA,UAAWd,MAAA,CAAAkB,UAAU,CAACR,GAAG;;sCAK/DL,mBAAA,CA2BQ,iB,kBA1BNF,mBAAA,CAyBKG,SAAA,QAAAC,WAAA,CAzBeP,MAAA,CAAAC,YAAY,EAArBkB,KAAK;yBAAhBhB,mBAAA,CAyBK;MAzB8BO,GAAG,EAAES,KAAK,CAACC,EAAE;MAC7CT,OAAK,EAAAC,MAAA,IAAES,IAAA,CAAAC,KAAK,WAAWH,KAAK,CAACC,EAAE;2BAEhCjB,mBAAA,CAqBKG,SAAA,QAAAC,WAAA,CArBaC,MAAA,CAAAC,OAAO,EAAdC,GAAG;2BAAdP,mBAAA,CAqBK;QArBuBO,GAAG,MAAMS,KAAK,CAACC,EAAE,IAAIV,GAAG;QAAIX,KAAK,EAAC;UAC5CW,GAAG,e,cACjBP,mBAAA,CAAwC,QAAxCoB,UAAwC,EAAAC,gBAAA,CAAnBL,KAAK,CAACT,GAAG,qBAEXe,KAAK,CAACC,OAAO,CAACP,KAAK,CAACT,GAAG,M,cAC1CP,mBAAA,CAWO,QAAAwB,UAAA,I,kBAVLxB,mBAAA,CAIOG,SAAA,QAAAC,WAAA,CAJuBY,KAAK,CAACT,GAAG,EAAEkB,KAAK,SAAhCC,IAAI,EAAEC,KAAK;6BAAzB3B,mBAAA,CAIO;UAJgDO,GAAG,EAAEoB,KAAK;UAC/DC,KAAmH,EAAnH;YAAA;YAAA;YAAA;YAAA;YAAA;UAAA,CAAmH;UAChHC,KAAK,EAAEhC,MAAA,CAAAiC,OAAO,CAACJ,IAAI,EAAEK;4BAClBlC,MAAA,CAAAiC,OAAO,CAACJ,IAAI,EAAEK,IAAI,wBAAAC,UAAA;sCAEdhB,KAAK,CAACT,GAAG,EAAER,MAAM,Q,cAA7BC,mBAAA,CAIO;;QAHL4B,KAAgG,EAAhG;UAAA;UAAA;UAAA;UAAA;QAAA,CAAgG;QAC5FC,KAAK,EAAEb,KAAK,CAACT,GAAG,EAAEkB,KAAK,IAAIQ,GAAG,CAACP,IAAI,IAAI7B,MAAA,CAAAiC,OAAO,CAACJ,IAAI,EAAEK,IAAI,EAAEG,IAAI;SAAQ,IACxE,GAAAb,gBAAA,CAAGL,KAAK,CAACT,GAAG,EAAER,MAAM,4BAAAoC,UAAA,K,sDAI7BnC,mBAAA,CAEWG,SAAA;QAAAI,GAAA;MAAA,I,kCADPS,KAAK,CAACT,GAAG,kB;;uDAMrBP,mBAAA,CAAuC,KAAAoC,UAAA,EAA7B,2BAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}